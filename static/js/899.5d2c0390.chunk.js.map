{"version":3,"file":"static/js/899.5d2c0390.chunk.js","mappings":"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","sources":["webpack://react-way-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-way-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://react-way-samurai/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://react-way-samurai/./src/components/common/FormsControl/FormsControl.module.css?07ef","components/common/FormsControl/FormsControl.tsx","utils/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__kOha-\",\"posts\":\"MyPosts_posts__3ahRb\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__3Q4xH\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ninterface PostProps {\r\n  message: string | undefined\r\n  likesCount: number\r\n}\r\n\r\nconst Post = ({message, likesCount}: PostProps) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        src='https://www.buro247.ua/images/2017/09/neytiri-avatar-5824.jpg'\r\n        alt='ava'\r\n      />\r\n      {message}\r\n      <div>\r\n        <span>likes</span> {likesCount}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {IPost} from '../../../models'\r\nimport {maxLengthCreator, required} from '../../../utils/validators'\r\nimport {Textarea} from '../../common/FormsControl/FormsControl'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\n\r\ninterface MyPostsProps {\r\n  posts: IPost[]\r\n  onCreateNewPost: (newPostText: string) => void\r\n}\r\n\r\nconst maxLength20 = maxLengthCreator(20)\r\n\r\nconst MyPosts = ({posts, onCreateNewPost}: MyPostsProps) => {\r\n  const createNewPost = (values: any) => {\r\n    onCreateNewPost(values.newPostText)\r\n  }\r\n\r\n  const postsElements = [...posts]\r\n    .reverse()\r\n    .map((p) => (\r\n      <Post key={p.id} message={p.message} likesCount={p.likesCount} />\r\n    ))\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My Posts</h3>\r\n      <div>\r\n        <ProfileReduxNewPostForm onSubmit={createNewPost} />\r\n      </div>\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyPosts\r\n\r\nconst ProfileNewPostForm = ({handleSubmit}: any) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name='newPostText'\r\n          placeholder='new post text...'\r\n          validate={[required, maxLength20]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ProfileReduxNewPostForm = reduxForm({form: 'ProfileNewPostText'})(\r\n  ProfileNewPostForm\r\n)\r\n","import {connect} from 'react-redux'\r\nimport {IState} from '../../../models'\r\nimport {addPostAC} from '../../../redux/profileReducer'\r\nimport MyPosts from './MyPosts'\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    posts: state.profilePage.posts\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onCreateNewPost: (newPostText: string) => {\r\n      dispatch(addPostAC(newPostText))\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__hOZyL\"};","import React, {useEffect, useState} from 'react'\r\n\r\ninterface ProfileStatusProps {\r\n  propsStatus: string\r\n  setUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = ({propsStatus, setUserStatus}: ProfileStatusProps) => {\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [status, setStatus] = useState(propsStatus)\r\n\r\n  useEffect(() => {\r\n    setStatus(propsStatus)\r\n  }, [propsStatus])\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactivateEditMode = ({target}: any) => {\r\n    setEditMode(false)\r\n    setUserStatus(target.value)\r\n  }\r\n\r\n  const handleInput = ({target}: any) => {\r\n    setStatus(target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {editMode ? (\r\n        <div>\r\n          <input\r\n            autoFocus\r\n            onBlur={deactivateEditMode}\r\n            type='text'\r\n            value={status}\r\n            onChange={handleInput}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>{propsStatus}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileStatus\r\n","import React from 'react'\r\nimport {IProfileUser} from '../../../models'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatus from './ProfileStatus'\r\n\r\ninterface ProfileInfoProps {\r\n  profile: IProfileUser\r\n  status: string\r\n  setUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, setUserStatus}: ProfileInfoProps) => {\r\n  if (!profile) return <Preloader />\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large} alt='ava' />\r\n        <ProfileStatus propsStatus={status} setUserStatus={setUserStatus} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo\r\n","import React from 'react'\r\nimport {IProfileUser} from '../../models'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n// import s from './Profile.module.css'\r\n\r\ninterface ProfileProps {\r\n  profile: IProfileUser\r\n  status: string\r\n  setUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = ({profile, status, setUserStatus}: ProfileProps) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={profile}\r\n        status={status}\r\n        setUserStatus={setUserStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {useLocation, useNavigate, useParams} from 'react-router-dom'\r\nimport {compose} from 'redux'\r\nimport {IProfileUser, IState} from '../../models'\r\nimport {\r\n  getUserProfile,\r\n  getUserStatus,\r\n  setUserStatus\r\n} from '../../redux/profileReducer'\r\nimport Profile from './Profile'\r\n// import { withAuthReducer } from '../../hoc/withAuthRedirect'\r\n\r\ninterface ProfileContainerProps {\r\n  getUserProfile: (userId: number) => void\r\n  getUserStatus: (id: number) => void\r\n  setUserStatus: (status: string) => void\r\n  status: string\r\n  profile: IProfileUser\r\n  router: any\r\n  isAuth: boolean\r\n  authorizedUserId: number\r\n  history: any\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerProps, {}> {\r\n  componentDidMount() {\r\n    let userId = this.props.router.params.userId\r\n    if (!userId) {\r\n      userId = 2\r\n      // userId = this.props.authorizedUserId\r\n      // if (!userId) {\r\n      //   this.props.history.push('/login')\r\n      // }\r\n    }\r\n    this.props.getUserProfile(userId)\r\n    this.props.getUserStatus(userId)\r\n  }\r\n  render() {\r\n    return <Profile {...this.props} profile={this.props.profile} />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.userId\r\n  }\r\n}\r\n\r\nconst mapDispatchObjectToProps = {\r\n  getUserProfile,\r\n  setUserStatus,\r\n  getUserStatus\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  // withAuthReducer\r\n  connect(mapStateToProps, mapDispatchObjectToProps)\r\n)(ProfileContainer)\r\n\r\nfunction withRouter(Component: any) {\r\n  function ComponentWithRouterProp(props: any) {\r\n    let location = useLocation()\r\n    let navigate = useNavigate()\r\n    let params = useParams()\r\n    return <Component {...props} router={{location, navigate, params}} />\r\n  }\r\n\r\n  return ComponentWithRouterProp\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControl_formControl__1qHzT\",\"error\":\"FormsControl_error__Rkvhi\",\"formSummaryError\":\"FormsControl_formSummaryError__S3afn\"};","import React from 'react'\r\nimport s from './FormsControl.module.css'\r\n\r\nconst Element =\r\n  (Element: any) =>\r\n  ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n      <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <div>\r\n          <Element {...input} {...props} />\r\n        </div>\r\n        <div>{hasError && <span> {meta.error} </span>}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport const Textarea = Element('textarea')\r\nexport const Input = Element('input')\r\n","export const required = (value: string) => {\r\n  if (value) return undefined\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n  return (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength}`\r\n  }\r\n}\r\n"],"names":["message","likesCount","className","s","src","alt","maxLength20","maxLengthCreator","posts","onCreateNewPost","postsElements","reverse","map","p","id","ProfileReduxNewPostForm","onSubmit","values","newPostText","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","connect","state","profilePage","dispatch","addPostAC","MyPosts","propsStatus","setUserStatus","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onBlur","target","value","type","onChange","onDoubleClick","profile","photos","large","Preloader","ProfileContainer","userId","this","props","router","params","getUserProfile","getUserStatus","React","mapDispatchObjectToProps","compose","Component","location","useLocation","navigate","useNavigate","useParams","isAuth","auth","authorizedUserId","Element","input","meta","hasError","touched","error","Input","maxLength","length"],"sourceRoot":""}